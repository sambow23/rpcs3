--- ./rpcs3/Emu/Cell/SPURecompiler.cpp
+++ ./rpcs3/Emu/Cell/SPURecompiler.cpp
@@ -4525,7 +4525,28 @@
 						if (src > 0x40000)
 						{
 							// Use the xfloat hint to create 256-bit (4x double) PHI
-							llvm::Type* type = g_cfg.core.spu_accurate_xfloat && bb.reg_maybe_xf[i] ? get_type<f64[4]>() : get_reg_type(i);
+							const bool may_be_accurate_xfloat = g_cfg.core.spu_accurate_xfloat ||
+								g_cfg.core.spu_fcgt_accuracy == spu_instruction_accuracy::accurate ||
+								g_cfg.core.spu_fcmgt_accuracy == spu_instruction_accuracy::accurate ||
+							    g_cfg.core.spu_fm_accuracy == spu_instruction_accuracy::accurate ||
+								g_cfg.core.spu_fnms_accuracy == spu_instruction_accuracy::accurate ||
+							    g_cfg.core.spu_fma_accuracy == spu_instruction_accuracy::accurate ||
+								g_cfg.core.spu_fms_accuracy == spu_instruction_accuracy::accurate ||
+							    g_cfg.core.spu_frest_accuracy == spu_instruction_accuracy::accurate ||
+								g_cfg.core.spu_frsqest_accuracy == spu_instruction_accuracy::accurate ||
+							    g_cfg.core.spu_fi_accuracy == spu_instruction_accuracy::accurate ||
+								g_cfg.core.spu_fa_accuracy == spu_instruction_accuracy::accurate ||
+								g_cfg.core.spu_fs_accuracy == spu_instruction_accuracy::accurate ||
+							    g_cfg.core.spu_fesd_accuracy == spu_instruction_accuracy::accurate ||
+								g_cfg.core.spu_frds_accuracy == spu_instruction_accuracy::accurate ||
+							    g_cfg.core.spu_fceq_accuracy == spu_instruction_accuracy::accurate ||
+								g_cfg.core.spu_fcmeq_accuracy == spu_instruction_accuracy::accurate ||
+							    g_cfg.core.spu_cflts_accuracy == spu_instruction_accuracy::accurate ||
+								g_cfg.core.spu_cfltu_accuracy == spu_instruction_accuracy::accurate ||
+							    g_cfg.core.spu_csflt_accuracy == spu_instruction_accuracy::accurate ||
+								g_cfg.core.spu_cuflt_accuracy == spu_instruction_accuracy::accurate;
+
+							llvm::Type* type = (may_be_accurate_xfloat && bb.reg_maybe_xf[i]) ? get_type<f64[4]>() : get_reg_type(i);
 
 							const auto _phi = m_ir->CreatePHI(type, ::size32(bb.preds), fmt::format("phi0x%05x_r%u", baddr, i));
 							m_block->phi[i] = _phi;
@@ -7531,7 +7552,7 @@
 	void FREST(spu_opcode_t op)
 	{
 		// TODO
-		if (g_cfg.core.spu_accurate_xfloat)
+		if (g_cfg.core.spu_accurate_xfloat || g_cfg.core.spu_frest_accuracy == spu_instruction_accuracy::accurate)
 		{
 			const auto a = get_vr<f32[4]>(op.ra);
 			const auto mask_ov = sext<s32[4]>(bitcast<s32[4]>(fabs(a)) > splat<s32[4]>(0x7e7fffff));
@@ -7547,7 +7568,7 @@
 	void FRSQEST(spu_opcode_t op)
 	{
 		// TODO
-		if (g_cfg.core.spu_accurate_xfloat)
+		if (g_cfg.core.spu_accurate_xfloat || g_cfg.core.spu_frsqest_accuracy == spu_instruction_accuracy::accurate)
 			set_vr(op.rt, fsplat<f64[4]>(1.0) / sqrt(fabs(get_vr<f64[4]>(op.ra))));
 		else
 			set_vr(op.rt, fsplat<f32[4]>(1.0) / sqrt(fabs(get_vr<f32[4]>(op.ra))));
@@ -7555,7 +7576,7 @@
 
 	void FCGT(spu_opcode_t op)
 	{
-		if (g_cfg.core.spu_accurate_xfloat)
+		if (g_cfg.core.spu_accurate_xfloat || g_cfg.core.spu_fcgt_accuracy == spu_instruction_accuracy::accurate)
 		{
 			set_vr(op.rt, sext<s32[4]>(fcmp_ord(get_vr<f64[4]>(op.ra) > get_vr<f64[4]>(op.rb))));
 			return;
@@ -7599,7 +7620,7 @@
 			return;
 		}
 
-		if (g_cfg.core.spu_approx_xfloat)
+		if (g_cfg.core.spu_approx_xfloat || g_cfg.core.spu_fcgt_accuracy == spu_instruction_accuracy::approximate)
 		{
 			const auto ai = eval(bitcast<s32[4]>(a));
 			const auto bi = eval(bitcast<s32[4]>(b));
@@ -7617,7 +7638,7 @@
 
 	void FCMGT(spu_opcode_t op)
 	{
-		if (g_cfg.core.spu_accurate_xfloat)
+		if (g_cfg.core.spu_accurate_xfloat || g_cfg.core.spu_fcmgt_accuracy == spu_instruction_accuracy::accurate)
 		{
 			set_vr(op.rt, sext<s32[4]>(fcmp_ord(fabs(get_vr<f64[4]>(op.ra)) > fabs(get_vr<f64[4]>(op.rb)))));
 			return;
@@ -7626,7 +7647,7 @@
 		const auto a = eval(fabs(get_vr<f32[4]>(op.ra)));
 		const auto b = eval(fabs(get_vr<f32[4]>(op.rb)));
 
-		if (g_cfg.core.spu_approx_xfloat)
+		if (g_cfg.core.spu_approx_xfloat || g_cfg.core.spu_fcmgt_accuracy == spu_instruction_accuracy::approximate)
 		{
 			set_vr(op.rt, sext<s32[4]>(fcmp_uno(a > b) & (bitcast<s32[4]>(a) > bitcast<s32[4]>(b))));
 		}
@@ -7638,7 +7659,7 @@
 
 	void FA(spu_opcode_t op)
 	{
-		if (g_cfg.core.spu_accurate_xfloat)
+		if (g_cfg.core.spu_accurate_xfloat || g_cfg.core.spu_fa_accuracy == spu_instruction_accuracy::accurate)
 			set_vr(op.rt, get_vr<f64[4]>(op.ra) + get_vr<f64[4]>(op.rb));
 		else
 			set_vr(op.rt, get_vr<f32[4]>(op.ra) + get_vr<f32[4]>(op.rb));
@@ -7646,9 +7667,9 @@
 
 	void FS(spu_opcode_t op)
 	{
-		if (g_cfg.core.spu_accurate_xfloat)
+		if (g_cfg.core.spu_accurate_xfloat || g_cfg.core.spu_fs_accuracy == spu_instruction_accuracy::accurate)
 			set_vr(op.rt, get_vr<f64[4]>(op.ra) - get_vr<f64[4]>(op.rb));
-		else if (g_cfg.core.spu_approx_xfloat)
+		else if (g_cfg.core.spu_approx_xfloat || g_cfg.core.spu_fm_accuracy == spu_instruction_accuracy::approximate)
 		{
 			const auto b = eval(clamp_smax(get_vr<f32[4]>(op.rb))); // for #4478
 			set_vr(op.rt, get_vr<f32[4]>(op.ra) - b);
@@ -7659,9 +7680,9 @@
 
 	void FM(spu_opcode_t op)
 	{
-		if (g_cfg.core.spu_accurate_xfloat)
+		if (g_cfg.core.spu_accurate_xfloat || g_cfg.core.spu_fm_accuracy == spu_instruction_accuracy::accurate)
 			set_vr(op.rt, get_vr<f64[4]>(op.ra) * get_vr<f64[4]>(op.rb));
-		else if (g_cfg.core.spu_approx_xfloat)
+		else if (g_cfg.core.spu_approx_xfloat || g_cfg.core.spu_fm_accuracy == spu_instruction_accuracy::approximate)
 		{
 			const auto a = get_vr<f32[4]>(op.ra);
 			const auto b = get_vr<f32[4]>(op.rb);
@@ -7684,7 +7705,7 @@
 
 	void FESD(spu_opcode_t op)
 	{
-		if (g_cfg.core.spu_accurate_xfloat)
+		if (g_cfg.core.spu_accurate_xfloat || g_cfg.core.spu_fesd_accuracy == spu_instruction_accuracy::accurate)
 		{
 			const auto r = shuffle2(get_vr<f64[4]>(op.ra), fsplat<f64[4]>(0.), 1, 3);
 			const auto d = bitcast<s64[2]>(r);
@@ -7704,7 +7725,7 @@
 
 	void FRDS(spu_opcode_t op)
 	{
-		if (g_cfg.core.spu_accurate_xfloat)
+		if (g_cfg.core.spu_accurate_xfloat || g_cfg.core.spu_frds_accuracy == spu_instruction_accuracy::accurate)
 		{
 			const auto r = get_vr<f64[2]>(op.ra);
 			const auto d = bitcast<s64[2]>(r);
@@ -7725,7 +7746,7 @@
 
 	void FCEQ(spu_opcode_t op)
 	{
-		if (g_cfg.core.spu_accurate_xfloat)
+		if (g_cfg.core.spu_accurate_xfloat || g_cfg.core.spu_fceq_accuracy == spu_instruction_accuracy::accurate)
 			set_vr(op.rt, sext<s32[4]>(fcmp_ord(get_vr<f64[4]>(op.ra) == get_vr<f64[4]>(op.rb))));
 		else
 			set_vr(op.rt, sext<s32[4]>(fcmp_ord(get_vr<f32[4]>(op.ra) == get_vr<f32[4]>(op.rb))));
@@ -7733,7 +7754,7 @@
 
 	void FCMEQ(spu_opcode_t op)
 	{
-		if (g_cfg.core.spu_accurate_xfloat)
+		if (g_cfg.core.spu_accurate_xfloat || g_cfg.core.spu_fcmeq_accuracy == spu_instruction_accuracy::accurate)
 			set_vr(op.rt, sext<s32[4]>(fcmp_ord(fabs(get_vr<f64[4]>(op.ra)) == fabs(get_vr<f64[4]>(op.rb)))));
 		else
 			set_vr(op.rt, sext<s32[4]>(fcmp_ord(fabs(get_vr<f32[4]>(op.ra)) == fabs(get_vr<f32[4]>(op.rb)))));
@@ -7819,9 +7840,9 @@
 	void FNMS(spu_opcode_t op)
 	{
 		// See FMA.
-		if (g_cfg.core.spu_accurate_xfloat)
+		if (g_cfg.core.spu_accurate_xfloat || g_cfg.core.spu_fnms_accuracy == spu_instruction_accuracy::accurate)
 			set_vr(op.rt4, fmuladd(eval(-get_vr<f64[4]>(op.ra)), get_vr<f64[4]>(op.rb), get_vr<f64[4]>(op.rc)));
-		else if (g_cfg.core.spu_approx_xfloat)
+		else if (g_cfg.core.spu_approx_xfloat || g_cfg.core.spu_fnms_accuracy == spu_instruction_accuracy::approximate)
 		{
 			const auto a = eval(clamp_smax(get_vr<f32[4]>(op.ra)));
 			const auto b = eval(clamp_smax(get_vr<f32[4]>(op.rb)));
@@ -7834,9 +7855,9 @@
 	void FMA(spu_opcode_t op)
 	{
 		// Hardware FMA produces the same result as multiple + add on the limited double range (xfloat).
-		if (g_cfg.core.spu_accurate_xfloat)
+		if (g_cfg.core.spu_accurate_xfloat || g_cfg.core.spu_fma_accuracy == spu_instruction_accuracy::accurate)
 			set_vr(op.rt4, fmuladd(get_vr<f64[4]>(op.ra), get_vr<f64[4]>(op.rb), get_vr<f64[4]>(op.rc)));
-		else if (g_cfg.core.spu_approx_xfloat)
+		else if (g_cfg.core.spu_approx_xfloat || g_cfg.core.spu_fma_accuracy == spu_instruction_accuracy::approximate)
 		{
 			const auto a = get_vr<f32[4]>(op.ra);
 			const auto b = get_vr<f32[4]>(op.rb);
@@ -7853,9 +7874,9 @@
 	void FMS(spu_opcode_t op)
 	{
 		// See FMA.
-		if (g_cfg.core.spu_accurate_xfloat)
+		if (g_cfg.core.spu_accurate_xfloat || g_cfg.core.spu_fms_accuracy == spu_instruction_accuracy::accurate)
 			set_vr(op.rt4, fmuladd(get_vr<f64[4]>(op.ra), get_vr<f64[4]>(op.rb), eval(-get_vr<f64[4]>(op.rc))));
-		else if (g_cfg.core.spu_approx_xfloat)
+		else if (g_cfg.core.spu_approx_xfloat || g_cfg.core.spu_fms_accuracy == spu_instruction_accuracy::approximate)
 		{
 			const auto a = eval(clamp_smax(get_vr<f32[4]>(op.ra)));
 			const auto b = eval(clamp_smax(get_vr<f32[4]>(op.rb)));
@@ -7868,7 +7889,7 @@
 	void FI(spu_opcode_t op)
 	{
 		// TODO
-		if (g_cfg.core.spu_accurate_xfloat)
+		if (g_cfg.core.spu_accurate_xfloat || g_cfg.core.spu_fi_accuracy == spu_instruction_accuracy::accurate)
 			set_vr(op.rt, get_vr<f64[4]>(op.rb));
 		else
 			set_vr(op.rt, get_vr<f32[4]>(op.rb));
@@ -7876,7 +7897,7 @@
 
 	void CFLTS(spu_opcode_t op)
 	{
-		if (g_cfg.core.spu_accurate_xfloat)
+		if (g_cfg.core.spu_accurate_xfloat || g_cfg.core.spu_cflts_accuracy == spu_instruction_accuracy::accurate)
 		{
 			value_t<f64[4]> a = get_vr<f64[4]>(op.ra);
 			value_t<f64[4]> s;
@@ -7950,7 +7971,7 @@
 
 	void CFLTU(spu_opcode_t op)
 	{
-		if (g_cfg.core.spu_accurate_xfloat)
+		if (g_cfg.core.spu_accurate_xfloat || g_cfg.core.spu_cfltu_accuracy == spu_instruction_accuracy::accurate)
 		{
 			value_t<f64[4]> a = get_vr<f64[4]>(op.ra);
 			value_t<f64[4]> s;
@@ -8024,7 +8045,7 @@
 
 	void CSFLT(spu_opcode_t op)
 	{
-		if (g_cfg.core.spu_accurate_xfloat)
+		if (g_cfg.core.spu_accurate_xfloat || g_cfg.core.spu_csflt_accuracy == spu_instruction_accuracy::accurate)
 		{
 			value_t<s32[4]> a = get_vr<s32[4]>(op.ra);
 			value_t<f64[4]> r;
@@ -8064,7 +8085,7 @@
 
 	void CUFLT(spu_opcode_t op)
 	{
-		if (g_cfg.core.spu_accurate_xfloat)
+		if (g_cfg.core.spu_accurate_xfloat || g_cfg.core.spu_cuflt_accuracy == spu_instruction_accuracy::accurate)
 		{
 			value_t<s32[4]> a = get_vr<s32[4]>(op.ra);
 			value_t<f64[4]> r;

